# Security Stack Extension - Authentication and Intrusion Prevention
# This extends the main docker-compose.yml with security services
# 
# Services Included:
# - Authelia: Single sign-on with 2FA authentication
# - Fail2ban: Intrusion prevention system
# - Security monitoring and alerting components
#
# Usage: docker-compose -f docker-compose.yml -f docker-compose.security.yml up -d

services:

  # Authelia - Single Sign-On and 2FA Authentication
  # Provides centralized authentication for administrative interfaces
  authelia:
    image: authelia/authelia:4.38.0
    container_name: authelia
    restart: unless-stopped
    networks:
      - frontend
      - backend
    ports:
      - "9091:9091"
    volumes:
      - ./configs/authelia:/config:ro
      - ${SSD_PATH}/config/authelia:/data              # User database and sessions
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET=${AUTHELIA_JWT_SECRET}
      - AUTHELIA_SESSION_SECRET=${AUTHELIA_SESSION_SECRET}
      - AUTHELIA_STORAGE_ENCRYPTION_KEY=${AUTHELIA_STORAGE_ENCRYPTION_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DOMAIN=${DOMAIN}
      # Optional database configuration
      # - AUTHELIA_DB_PASSWORD=${AUTHELIA_DB_PASSWORD}
    depends_on:
      - redis
      # - mariadb  # Uncomment if using MySQL backend
    mem_limit: 256m
    cpus: 1
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Fail2ban - Intrusion Prevention System
  # Monitors logs for malicious activity and bans IP addresses
  fail2ban:
    image: crazymax/fail2ban:1.0.2
    container_name: fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./configs/fail2ban:/etc/fail2ban:ro
      - ${SSD_PATH}/config/fail2ban:/var/lib/fail2ban  # Ban database
      - /var/log:/var/log:ro                          # System logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Container logs
    environment:
      - TZ=${TZ}
      - F2B_LOG_LEVEL=INFO
      - F2B_LOG_TARGET=/var/log/fail2ban.log
      - F2B_DB_PURGE_AGE=1d
      - SSMTP_HOST=smtp.gmail.com                     # Email notifications (optional)
      - SSMTP_PORT=587
      - SSMTP_HOSTNAME=homeserver.${DOMAIN}
      # - SSMTP_USER=${SMTP_USER}                     # Uncomment for email alerts
      # - SSMTP_PASSWORD=${SMTP_PASSWORD}
    mem_limit: 256m
    cpus: 0.5
    security_opt:
      - no-new-privileges:true


  # Security Event Collector - Custom security monitoring
  security-monitor:
    image: alpine:3.19
    container_name: security-monitor
    restart: unless-stopped
    networks:
      - monitoring
      - backend
    volumes:
      - ./scripts/security-monitor.sh:/security-monitor.sh:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      - TZ=${TZ}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    command: ["/security-monitor.sh"]
    mem_limit: 128m
    cpus: 0.5
    security_opt:
      - no-new-privileges:true
    depends_on:
      - prometheus


  # Certificate Monitor - SSL certificate expiration monitoring
  cert-monitor:
    image: alpine:3.19
    container_name: cert-monitor
    restart: unless-stopped
    networks:
      - frontend
      - monitoring
    volumes:
      - ./scripts/cert-monitor.sh:/cert-monitor.sh:ro
      - ${SSD_PATH}/caddy/data:/caddy-data:ro
    environment:
      - TZ=${TZ}
      - DOMAIN=${DOMAIN}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - CHECK_INTERVAL=86400  # Check daily
    command: ["/cert-monitor.sh"]
    mem_limit: 64m
    security_opt:
      - no-new-privileges:true


  # Backup Verification - Verify backup integrity and encryption
  backup-security:
    image: alpine:3.19
    container_name: backup-security
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./scripts/backup-verify.sh:/backup-verify.sh:ro
      - ${SSD_PATH}/backups:/backups:ro
    environment:
      - TZ=${TZ}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - VERIFICATION_SCHEDULE=${BACKUP_SCHEDULE:-"0 3 * * *"}
    command: ["/backup-verify.sh"]
    mem_limit: 128m
    security_opt:
      - no-new-privileges:true