name: deploy-homeserver-v2

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force_full:
        description: 'Force full deployment (true/false)'
        required: false
        default: 'false'

concurrency:
  group: deploy
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: self-hosted
    outputs:
      core: ${{ steps.filter.outputs.core }}
      application: ${{ steps.filter.outputs.application }}
      monitoring: ${{ steps.filter.outputs.monitoring }}
      security: ${{ steps.filter.outputs.security }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      full_deploy: ${{ steps.full-deploy.outputs.result }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        clean: true
    
    - name: Detect Path Changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          core:
            - 'compose/core/**'
            - 'configs/caddy/**'
            - 'configs/mariadb/**'
            - 'configs/redis/**'
          application:
            - 'compose/media/**'
            - 'compose/gaming/**'
          monitoring:
            - 'compose/monitoring/**'
            - 'configs/prometheus/**'
            - 'configs/grafana/**'
            - 'configs/loki/**'
            - 'configs/alertmanager/**'
          security:
            - 'compose/security/**'
            - 'configs/fail2ban/**'
          infrastructure:
            - 'compose/infrastructure/**'
          global:
            - 'docker-compose.yml'
            - '.github/workflows/deploy.yml'
            - '.github/workflows/deploy-new.yml'
            - 'scripts/**'
    
    - name: Determine Full Deploy
      id: full-deploy
      run: |
        if [[ "${{ github.event.inputs.force_full }}" == "true" ]]; then
          echo "Manual full deployment requested"
          echo "result=true" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.filter.outputs.global }}" == "true" ]]; then
          echo "Global files changed - triggering full deployment"
          echo "result=true" >> $GITHUB_OUTPUT
        else
          echo "Selective deployment based on changed paths"
          echo "result=false" >> $GITHUB_OUTPUT
        fi
        
        echo ""
        echo "=== DEPLOYMENT DECISION SUMMARY ==="
        echo "Path-based change detection results:"
        echo "  â€¢ Core ............. ${{ steps.filter.outputs.core }}"
        echo "  â€¢ Application ...... ${{ steps.filter.outputs.application }}"
        echo "  â€¢ Monitoring ....... ${{ steps.filter.outputs.monitoring }}"
        echo "  â€¢ Security ......... ${{ steps.filter.outputs.security }}"
        echo "  â€¢ Infrastructure ... ${{ steps.filter.outputs.infrastructure }}"
        echo "  â€¢ Global files ..... ${{ steps.filter.outputs.global }}"
        echo "  â€¢ Full deploy ...... ${{ steps.full-deploy.outputs.result }}"
        echo "===================================="

  deploy-core:
    name: Deploy Core Infrastructure
    needs: detect-changes
    runs-on: self-hosted
    timeout-minutes: 29
    if: ${{ needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.core == 'true' }}
    env:
      DEPLOY_GROUP: core
    
    steps:
    - name: Announce Core Deployment
      run: |
        echo "ðŸš€ Deploying core infrastructure services"
        echo "Reason: Core=${{ needs.detect-changes.outputs.core }}, Full=${{ needs.detect-changes.outputs.full_deploy }}"
    
    - name: Clean Previous Run Files
      run: |
        echo "Cleaning up previous run files..."
        chown -R $USER:$USER . || true
        chmod -R u+w . || true
        rm -rf compose/core/configs/ || true
        
        sleep $((RANDOM % 10 + 1))

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    - name: Decrypt Environment Secrets
      run: ./scripts/decrypt-large-secrets.sh homeserver-env-secrets.json
      env:
        LARGE_SECRET_PASSPHRASE_HOMESERVER_ENV_SECRETS_JSON: ${{ secrets.ENV_SECRETS_PASSPHRASE }}

    - name: Deploy Core Services
      uses: ./.github/actions/deploy-services
      with:
        group: core
        services: "caddy cloudflare-ddns mariadb redis"
        secrets-file: $HOME/secrets/homeserver-env-secrets.json

    - name: Fix Permissions for Next Run
      if: always()
      run: |
        echo "Fixing permissions for next run..."
        chown -R $USER:$USER . || true
        chmod -R u+w . || true
        echo "Permissions fixed"

  deploy:
    name: Deploy ${{ matrix.group }}
    needs: [detect-changes, deploy-core]
    runs-on: self-hosted
    timeout-minutes: 29
    if: ${{ needs.deploy-core.result != 'failure' }}
    strategy:
      matrix:
        include:
          - group: infrastructure
            services: "runner-webhook docker-proxy"
          - group: application
            services: "plex plex-exporter qbittorrent qbittorrent-exporter teamspeak teamspeak-exporter cs2-server cs2-exporter"
          - group: monitoring
            services: "prometheus grafana loki promtail alertmanager backup-monitor backup-script metrics-collector uptime-kuma node-exporter cadvisor redis-exporter mariadb-exporter blackbox-exporter"
          - group: security
            services: "fail2ban"
      fail-fast: false
    env:
      GROUP: ${{ matrix.group }}
      SERVICES: ${{ matrix.services }}
    
    steps:
    - name: Check if Group Should Deploy
      run: |
        should_deploy="false"
        if [[ "${{ needs.detect-changes.outputs.full_deploy }}" == "true" ]]; then
          echo "Full deployment requested - proceeding with ${{ matrix.group }}"
          should_deploy="true"
        elif [[ "${{ matrix.group }}" == "application" && "${{ needs.detect-changes.outputs.application }}" == "true" ]]; then
          echo "Application changes detected - proceeding"
          should_deploy="true"
        elif [[ "${{ matrix.group }}" == "monitoring" && "${{ needs.detect-changes.outputs.monitoring }}" == "true" ]]; then
          echo "Monitoring changes detected - proceeding"
          should_deploy="true"
        elif [[ "${{ matrix.group }}" == "security" && "${{ needs.detect-changes.outputs.security }}" == "true" ]]; then
          echo "Security changes detected - proceeding"
          should_deploy="true"
        elif [[ "${{ matrix.group }}" == "infrastructure" && "${{ needs.detect-changes.outputs.infrastructure }}" == "true" ]]; then
          echo "Infrastructure changes detected - proceeding"
          should_deploy="true"
        else
          echo "No changes detected for ${{ matrix.group }} - skipping"
          exit 0
        fi
    
    - name: Announce Deployment Scope
      run: |
        echo "ðŸš€ Deploying service group: ${{ matrix.group }}"
        echo "Full deployment mode: ${{ needs.detect-changes.outputs.full_deploy }}"
        echo "Services: ${{ matrix.services }}"
    
    - name: Clean Previous Run Files
      run: |
        echo "Cleaning up previous run files..."
        chown -R $USER:$USER . || true
        chmod -R u+w . || true
        rm -rf compose/core/configs/ || true
        
        # Random delay to avoid concurrent git operations
        sleep $((RANDOM % 10 + 1))

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    - name: Decrypt Environment Secrets
      run: ./scripts/decrypt-large-secrets.sh homeserver-env-secrets.json
      env:
        LARGE_SECRET_PASSPHRASE_HOMESERVER_ENV_SECRETS_JSON: ${{ secrets.ENV_SECRETS_PASSPHRASE }}

    - name: Prepare Environment Variables
      run: |
        if [ ! -f "$HOME/secrets/homeserver-env-secrets.json" ]; then
          echo "::error::Environment secrets file not found"
          exit 1
        fi
        
        if ! jq empty "$HOME/secrets/homeserver-env-secrets.json" 2>/dev/null; then
          echo "::error::Invalid JSON format in environment secrets"
          exit 1
        fi
        
        VARIABLE_COUNT=$(jq 'keys | length' "$HOME/secrets/homeserver-env-secrets.json")
        echo "::notice::Environment file contains $VARIABLE_COUNT variables"
        
        CRITICAL_VARS=("DOMAIN" "CLOUDFLARE_API_TOKEN" "MYSQL_ROOT_PASSWORD" "REDIS_PASSWORD")
        for var in "${CRITICAL_VARS[@]}"; do
          if jq -e "has(\"$var\")" "$HOME/secrets/homeserver-env-secrets.json" >/dev/null; then
            echo "::notice::Critical variable $var verified"
          else
            echo "::error::Critical variable $var is missing"
            exit 1
          fi
        done

    - name: Validate Configuration
      run: |
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        cd /actions-runner/_work/romulus/romulus
        docker-compose config --quiet

    - name: Deploy Services
      uses: ./.github/actions/deploy-services
      with:
        group: ${{ matrix.group }}
        services: ${{ matrix.services }}
        secrets-file: $HOME/secrets/homeserver-env-secrets.json

    - name: Fix Permissions for Next Run
      if: always()
      run: |
        echo "Fixing permissions for next run..."
        chown -R $USER:$USER . || true
        chmod -R u+w . || true
        echo "Permissions fixed"

    - name: Deployment Summary
      run: |
        echo "Deployment completed successfully!"
        echo ""
        echo "Service Categories Deployed:"
        echo "  â€¢ Core Infrastructure (Proxy, Database, Cache, GitHub Runners)"
        echo "  â€¢ Media Services (Plex, qBittorrent)"
        echo "  â€¢ Gaming Services (TeamSpeak, CS2)"
        echo "  â€¢ Monitoring Stack (Prometheus, Grafana, Loki, Alerting, Uptime)"
        echo "  â€¢ Security Services (Fail2Ban)"
        echo ""
        echo "Configuration:"
        echo "  â€¢ All environment variables loaded from encrypted secrets"
        echo "  â€¢ Single passphrase authentication used"
        echo "  â€¢ Secure cleanup completed"