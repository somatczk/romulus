name: Deploy Homeserver

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy
  cancel-in-progress: true

permissions:
  contents: read

env:
  TZ: ${{ secrets.TZ }}
  PUID: ${{ secrets.PUID }}
  PGID: ${{ secrets.PGID }}
  DOMAIN: ${{ secrets.DOMAIN }}
  NVME_PATH: ${{ secrets.NVME_PATH }}
  SSD_PATH: ${{ secrets.SSD_PATH }}
  HDD_PATH: ${{ secrets.HDD_PATH }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_DOMAINS: ${{ secrets.CLOUDFLARE_DOMAINS }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  TS3SERVER_DB_PASSWORD: ${{ secrets.TS3SERVER_DB_PASSWORD }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  PLEX_CLAIM: ${{ secrets.PLEX_CLAIM }}
  QBITTORRENT_PASSWORD: ${{ secrets.QBITTORRENT_PASSWORD }}
  CS2_SERVER_NAME: ${{ secrets.CS2_SERVER_NAME }}
  CS2_RCON_PASSWORD: ${{ secrets.CS2_RCON_PASSWORD }}
  CS2_SERVER_PASSWORD: ${{ secrets.CS2_SERVER_PASSWORD }}
  STEAM_TOKEN: ${{ secrets.STEAM_TOKEN }}
  TS3_SERVER_ADMIN_PASSWORD: ${{ secrets.TS3_SERVER_ADMIN_PASSWORD }}
  GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
  PLEX_MEMORY_LIMIT: ${{ secrets.PLEX_MEMORY_LIMIT }}
  PLEX_CPU_LIMIT: ${{ secrets.PLEX_CPU_LIMIT }}
  CS2_MEMORY_LIMIT: ${{ secrets.CS2_MEMORY_LIMIT }}
  CS2_CPU_LIMIT: ${{ secrets.CS2_CPU_LIMIT }}
  PLEX_PORT: ${{ secrets.PLEX_PORT }}
  QBITTORRENT_PORT: ${{ secrets.QBITTORRENT_PORT }}
  GRAFANA_PORT: ${{ secrets.GRAFANA_PORT }}
  PROMETHEUS_PORT: ${{ secrets.PROMETHEUS_PORT }}
  TEAMSPEAK_VOICE_PORT: ${{ secrets.TEAMSPEAK_VOICE_PORT }}
  TEAMSPEAK_QUERY_PORT: ${{ secrets.TEAMSPEAK_QUERY_PORT }}
  TEAMSPEAK_FILES_PORT: ${{ secrets.TEAMSPEAK_FILES_PORT }}
  CS2_PORT: ${{ secrets.CS2_PORT }}
  CS2_RCON_PORT: ${{ secrets.CS2_RCON_PORT }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  MONITORING_DB_PASSWORD: ${{ secrets.MONITORING_DB_PASSWORD }}

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: self-hosted
    timeout-minutes: 30
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    - name: Validate Configuration
      run: |
        echo "Validating Docker Compose configuration..."
        docker-compose config --quiet

    - name: Create Required Directories
      run: |
        mkdir -p "${SSD_PATH}"/{caddy/{data,config},databases/{mariadb,redis},config/{plex,qbittorrent,teamspeak,fail2ban},monitoring/{prometheus,grafana,loki,alertmanager,uptime-kuma}}
        mkdir -p "${NVME_PATH}/games/cs2"
        mkdir -p "${HDD_PATH}"/{media,downloads/complete}
        sudo chown -R "${PUID}:${PGID}" "${SSD_PATH}" "${NVME_PATH}" "${HDD_PATH}" || true

    - name: Deploy Core Infrastructure
      run: |
        echo "Deploying core infrastructure services..."
        docker-compose -f compose/core/proxy.yml up -d
        docker-compose -f compose/core/database.yml up -d
        docker-compose -f compose/core/cache.yml up -d
        
        echo "Waiting for core services..."
        sleep 30
        
        docker-compose -f compose/core/database.yml ps mariadb | grep -q "Up" || exit 1
        docker-compose -f compose/core/cache.yml ps redis | grep -q "Up" || exit 1

    - name: Deploy Application Services  
      run: |
        echo "Deploying application services..."
        docker-compose -f compose/media/plex.yml up -d
        docker-compose -f compose/media/torrent.yml up -d
        docker-compose -f compose/gaming/teamspeak.yml up -d
        docker-compose -f compose/gaming/cs2.yml up -d
        sleep 30

    - name: Deploy Monitoring Stack
      run: |
        echo "Deploying monitoring services..."
        docker-compose -f compose/monitoring/metrics.yml up -d
        docker-compose -f compose/monitoring/logging.yml up -d
        docker-compose -f compose/monitoring/exporters.yml up -d
        docker-compose -f compose/monitoring/alerting.yml up -d
        docker-compose -f compose/monitoring/uptime.yml up -d
        sleep 20

    - name: Deploy Security Services
      run: |
        echo "Deploying security services..."
        docker-compose -f compose/security/fail2ban.yml up -d
        sleep 10

    - name: Health Check
      run: |
        echo "Performing health checks..."
        
        # Check core services
        for service in caddy mariadb redis; do
          echo "Checking $service..."
          timeout=60
          elapsed=0
          
          while [[ $elapsed -lt $timeout ]]; do
            case $service in
              caddy)
                if docker-compose -f compose/core/proxy.yml ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
              mariadb)
                if docker-compose -f compose/core/database.yml ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
              redis)
                if docker-compose -f compose/core/cache.yml ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
            esac
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          if [[ $elapsed -ge $timeout ]]; then
            echo "$service failed to start"
            exit 1
          fi
        done
        
        # Check monitoring services
        for service in prometheus grafana; do
          echo "Checking $service..."
          if docker-compose -f compose/monitoring/metrics.yml ps "$service" | grep -q "Up"; then
            echo "$service is running"
          else
            echo "$service not running (non-critical)"
          fi
        done
        
        echo "All critical services are running"

    - name: Test External Access
      run: |
        echo "Testing external access..."
        sleep 30
        
        endpoints=(
          "https://monitoring.${DOMAIN}/api/health"
          "https://status.${DOMAIN}"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing $endpoint..."
          if curl -f -s --max-time 30 --insecure "$endpoint" >/dev/null 2>&1; then
            echo "✓ $endpoint accessible"
          else
            echo "⚠ $endpoint not accessible (may need more time)"
          fi
        done

    - name: Deployment Summary
      run: |
        echo "Deployment completed successfully!"
        echo ""
        echo "Service Categories Deployed:"
        echo "  • Core Infrastructure (Proxy, Database, Cache)"
        echo "  • Media Services (Plex, qBittorrent)"
        echo "  • Gaming Services (TeamSpeak, CS2)"
        echo "  • Monitoring Stack (Prometheus, Grafana, Loki, Alerting, Uptime)"
        echo "  • Security Services (Fail2Ban)"
        echo ""
        echo "Access URLs:"
        echo "  • Plex: https://plex.${DOMAIN}"
        echo "  • qBittorrent: https://torrents.${DOMAIN}"
        echo "  • Grafana: https://monitoring.${DOMAIN}"
        echo "  • TeamSpeak: ts.${DOMAIN}:${TEAMSPEAK_VOICE_PORT}"
        echo "  • CS2 Server: ${DOMAIN}:${CS2_PORT}"