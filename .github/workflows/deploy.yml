name: deploy-homeserver

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force_full:
        description: 'Force full deployment (true/false)'
        required: false
        default: 'false'

concurrency:
  group: deploy
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: self-hosted
    outputs:
      core: ${{ steps.changes.outputs.core }}
      application: ${{ steps.changes.outputs.application }}
      monitoring: ${{ steps.changes.outputs.monitoring }}
      security: ${{ steps.changes.outputs.security }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      full_deploy: ${{ steps.changes.outputs.full_deploy }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true
    
    - name: Detect Changes
      id: changes
      uses: ./.github/actions/detect-changes
      with:
        force-full: ${{ inputs.force_full }}
    
    - name: Upload Changed Files List
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: changed-files
        path: changed_files.txt
        if-no-files-found: ignore
        retention-days: 7

  deploy-core:
    name: Deploy Core Infrastructure
    needs: detect-changes
    runs-on: self-hosted
    timeout-minutes: 29
    if: ${{ needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.core == 'true' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true
    
    - name: Decrypt Environment Secrets
      run: ./scripts/decrypt-large-secrets.sh homeserver-env-secrets.json
      env:
        LARGE_SECRET_PASSPHRASE_HOMESERVER_ENV_SECRETS_JSON: ${{ secrets.ENV_SECRETS_PASSPHRASE }}
    
    - name: Deploy Core Services
      run: |
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        cd ${{ github.workspace }}
        
        sudo mkdir -p "${SSD_PATH}"/{caddy/{data,config},databases/{mariadb,redis},actions-runner/_work}
        sudo chown -R "${PUID}:${PGID}" "${SSD_PATH}" || true
        
        CORE_SERVICES="caddy cloudflare-ddns mariadb redis"
        echo "Deploying core infrastructure services: $CORE_SERVICES"
        
        echo "Stopping and removing existing core services..."
        docker-compose stop $CORE_SERVICES || true
        docker-compose rm -f $CORE_SERVICES || true
        
        echo "Building core services with latest changes..."
        docker-compose build --no-cache $CORE_SERVICES || echo "No build needed for some core services"
        
        echo "Deploying core services with fresh builds..."
        docker-compose up -d --force-recreate $CORE_SERVICES
        
        echo "Waiting for core services to start..."
        sleep 25
        
        echo "Verifying core services status..."
        for service in $CORE_SERVICES; do
          if docker-compose ps "$service" | grep -q "Up"; then
            echo "$service is running"
          else
            echo "$service may still be starting or failed"
          fi
        done
        
        echo "Core deployment completed"

  deploy:
    name: Deploy ${{ matrix.group }}
    needs: [detect-changes, deploy-core]
    runs-on: self-hosted
    timeout-minutes: 29
    if: ${{ always() && (needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.application == 'true' || needs.detect-changes.outputs.monitoring == 'true' || needs.detect-changes.outputs.security == 'true' || needs.detect-changes.outputs.infrastructure == 'true') }}
    strategy:
      matrix:
        include:
          - group: infrastructure
            depends_on: []
            condition: ${{ needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.infrastructure == 'true' }}
            services: "runner-webhook"
          - group: application
            depends_on: ["core"]
            condition: ${{ needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.application == 'true' }}
            services: "plex qbittorrent teamspeak cs2-server"
          - group: monitoring
            depends_on: ["core"]
            condition: ${{ needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.monitoring == 'true' }}
            services: "prometheus grafana loki promtail alertmanager uptime-kuma node-exporter cadvisor redis-exporter mariadb-exporter blackbox-exporter"
          - group: security
            depends_on: ["core"]
            condition: ${{ needs.detect-changes.outputs.full_deploy == 'true' || needs.detect-changes.outputs.security == 'true' }}
            services: "fail2ban"
      fail-fast: false
    env:
      GROUP: ${{ matrix.group }}
      SERVICES: ${{ matrix.services }}
    
    steps:
    - name: Announce Deployment Scope
      run: |
        echo "üöÄ Deploying service group: ${{ matrix.group }}"
        echo "Full deployment mode: ${{ needs.detect-changes.outputs.full_deploy }}"
        echo "Group-specific deployment: ${{ needs.detect-changes.outputs[matrix.group] }}"
    
    - name: Check Deployment Requirement
      run: |
        if [[ "${{ needs.detect-changes.outputs.full_deploy }}" == "true" ]]; then
          echo "Full deployment requested - proceeding with ${{ matrix.group }}"
        elif [[ "${{ needs.detect-changes.outputs[matrix.group] }}" == "true" ]]; then
          echo "Changes detected for ${{ matrix.group }} - proceeding"
        else
          echo "‚è≠No changes detected for ${{ matrix.group }} - skipping"
          exit 0
        fi
    
    - name: Clean Previous Run Files
      run: |
        echo "üîç PERMISSION ANALYSIS: Clean Previous Run Files - UID $(id -u), User: $(whoami)"
        if [ "$(id -u)" = "0" ]; then
          echo "üìç CLEANUP: ROOT PATH"
          chown -R $USER:$USER . || true
          chmod -R u+w . || true
          rm -rf compose/core/configs/ || true
        else
          echo "üìç CLEANUP: NON-ROOT PATH"
          sudo chown -R $USER:$USER . || true
          sudo chmod -R u+w . || true
          sudo rm -rf compose/core/configs/ || true
        fi

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    - name: Decrypt Environment Secrets
      run: ./scripts/decrypt-large-secrets.sh homeserver-env-secrets.json
      env:
        LARGE_SECRET_PASSPHRASE_HOMESERVER_ENV_SECRETS_JSON: ${{ secrets.ENV_SECRETS_PASSPHRASE }}

    - name: Prepare Environment Variables
      run: |
        if [ ! -f "$HOME/secrets/homeserver-env-secrets.json" ]; then
          echo "::error::Environment secrets file not found"
          exit 1
        fi
        
        if ! jq empty "$HOME/secrets/homeserver-env-secrets.json" 2>/dev/null; then
          echo "::error::Invalid JSON format in environment secrets"
          exit 1
        fi
        
        VARIABLE_COUNT=$(jq 'keys | length' "$HOME/secrets/homeserver-env-secrets.json")
        echo "::notice::Environment file contains $VARIABLE_COUNT variables"
        
        CRITICAL_VARS=("DOMAIN" "CLOUDFLARE_API_TOKEN" "MYSQL_ROOT_PASSWORD" "REDIS_PASSWORD")
        for var in "${CRITICAL_VARS[@]}"; do
          if jq -e "has(\"$var\")" "$HOME/secrets/homeserver-env-secrets.json" >/dev/null; then
            echo "::notice::Critical variable $var verified"
          else
            echo "::error::Critical variable $var is missing"
            exit 1
          fi
        done

    - name: Validate Configuration
      run: |
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        cd ${{ github.workspace }}
        docker-compose config --quiet

    - name: Deploy Services
      uses: ./.github/actions/deploy-services
      with:
        group: ${{ matrix.group }}
        services: ${{ matrix.services }}

    - name: Health Check
      uses: ./.github/actions/health-check

    - name: Fix Permissions for Next Run
      if: always()
      run: |
        echo "Fixing permissions for next run..."
        echo "üîç PERMISSION ANALYSIS: Final cleanup - UID $(id -u), User: $(whoami)"
        if [ "$(id -u)" = "0" ]; then
          echo "üìç FINAL CLEANUP: ROOT PATH"
          chown -R $USER:$USER . || true
          chmod -R u+w . || true
        else
          echo "üìç FINAL CLEANUP: NON-ROOT PATH"
          sudo chown -R $USER:$USER . || true
          sudo chmod -R u+w . || true
        fi
        echo "Permissions fixed"

    - name: Deployment Summary
      run: |
        echo "Deployment completed successfully!"
        echo ""
        echo "Service Categories Deployed:"
        echo "  ‚Ä¢ Core Infrastructure (Proxy, Database, Cache, GitHub Runners)"
        echo "  ‚Ä¢ Media Services (Plex, qBittorrent)"
        echo "  ‚Ä¢ Gaming Services (TeamSpeak, CS2)"
        echo "  ‚Ä¢ Monitoring Stack (Prometheus, Grafana, Loki, Alerting, Uptime)"
        echo "  ‚Ä¢ Security Services (Fail2Ban)"
        echo ""
        echo "Configuration:"
        echo "  ‚Ä¢ All environment variables loaded from encrypted secrets"
        echo "  ‚Ä¢ Single passphrase authentication used"
        echo "  ‚Ä¢ Secure cleanup completed"