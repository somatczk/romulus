# Caddy Reverse Proxy Configuration
# Automatic HTTPS with Cloudflare DNS challenge
# Handles SSL termination and routing for all homeserver services
#
# Security Features:
# - Automatic HTTP to HTTPS redirects
# - HSTS headers for enhanced security
# - Real IP forwarding for proper logging
# - Security headers (CSRF, XSS protection)
#
# Requirements:
# - CLOUDFLARE_API_TOKEN environment variable
# - Valid Cloudflare DNS zone management
# - Proper Docker network connectivity (frontend network)

# Global configuration
{
	# Use Cloudflare DNS challenge for automatic SSL certificates
	# This allows certificates for internal services without port 80/443 exposure
	acme_dns cloudflare {$CLOUDFLARE_API_TOKEN}
	
	# Email for Let's Encrypt certificate notifications
	email {$CLOUDFLARE_EMAIL}
	
	# Enable request/response logging
	log {
		output file /var/log/caddy/access.log
		format json
		level INFO
	}
}

# Plex Media Server
# Direct connection to Plex container with real IP preservation
plex.{$DOMAIN} {
	# Forward all traffic to Plex container
	reverse_proxy plex:32400 {
		# Preserve real client IP for Plex logs and access control
		header_up X-Real-IP {remote_host}
		
		# Plex-specific headers
		header_up X-Plex-Client-Identifier "Caddy-Reverse-Proxy"
	}
	
	# Custom headers for Plex optimization
	header {
		# Allow Plex to set its own frame options
		-X-Frame-Options
		# Plex needs more permissive CSP
		-Content-Security-Policy
	}
	
	# Logging specific to Plex access
	log {
		output file /var/log/caddy/plex.log
		format json
	}
}

# qBittorrent WebUI
# Torrent client web interface with authentication
torrents.{$DOMAIN} {
	# Forward to qBittorrent WebUI
	reverse_proxy qbittorrent:8080 {
		header_up X-Real-IP {remote_host}
	}
	
	# Rate limiting to prevent abuse
	# rate_limit {
	#	zone qbittorrent {
	#		key {remote_host}
	#		events 100
	#		window 1m
	#	}
	# }
}

# Grafana Monitoring Dashboard
# Observability and metrics visualization
monitoring.{$DOMAIN} {
	# Forward to Grafana container
	reverse_proxy grafana:3000 {
		header_up X-Real-IP {remote_host}
		
		# Grafana WebSocket support
		header_up Connection {>Connection}
		header_up Upgrade {>Upgrade}
	}
	
	# Custom headers for Grafana
	header {
		# Grafana needs permissive frame options for embedding
		-X-Frame-Options
		X-Frame-Options SAMEORIGIN
	}
}

# Prometheus Metrics Endpoint
# Protected metrics collection endpoint
metrics.{$DOMAIN} {
	# Basic auth protection for Prometheus
	basic_auth {
		admin $2a$14$Zkx19XLiW6VYouLHR5NbfOeNhNAf6.j5wy8xjJJAk8M5w.9.qmL6u  # Change this hash
	}
	
	reverse_proxy prometheus:9090 {
		header_up X-Real-IP {remote_host}
	}
}

# Uptime Kuma Status Page
# Service availability monitoring dashboard
status.{$DOMAIN} {
	reverse_proxy uptime-kuma:3001 {
		header_up X-Real-IP {remote_host}
		
		# WebSocket support for real-time updates
		header_up Connection {>Connection}
		header_up Upgrade {>Upgrade}
	}
}




# GitHub Runner Webhook
# Auto-scaling webhook endpoint for GitHub Actions runners
runners.{$DOMAIN} {
	reverse_proxy runner-webhook:3000 {
		header_up X-Real-IP {remote_host}
	}
	
	# Only allow GitHub webhook IPs (if needed)
	# @github_ips remote_ip 140.82.112.0/20 185.199.108.0/22 192.30.252.0/22
	# handle @github_ips {
	#	reverse_proxy runner-webhook:3000
	# }
	# respond * "Forbidden" 403
}


# Default catch-all for undefined subdomains
# Redirect to main domain or show maintenance page
*.{$DOMAIN} {
	# Redirect undefined subdomains to monitoring dashboard
	redir https://monitoring.{$DOMAIN}{uri} permanent
}

# Main domain redirect
# Redirect root domain to monitoring dashboard
{$DOMAIN} {
	redir https://monitoring.{$DOMAIN} permanent
}