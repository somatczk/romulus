name: Deploy Homeserver

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force_full:
        description: 'Force full deployment (true/false)'
        required: false
        default: 'false'

concurrency:
  group: deploy
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Detect which service groups need deployment based on file changes
  detect-changes:
    name: Detect Changes
    runs-on: self-hosted
    outputs:
      core: ${{ steps.changes.outputs.core }}
      application: ${{ steps.changes.outputs.application }}
      monitoring: ${{ steps.changes.outputs.monitoring }}
      security: ${{ steps.changes.outputs.security }}
      full_deploy: ${{ steps.changes.outputs.full_deploy }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true
    
    - name: Detect File Changes and Map to Service Groups
      id: changes
      run: |
        set -e
        
        # Initialize variables
        core="false"
        application="false"
        monitoring="false"
        security="false"
        full_deploy="false"
        
        # Handle manual override for full deployment
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_full }}" == "true" ]]; then
          echo "Manual full deployment requested"
          full_deploy="true"
        else
          # Get changed files between previous commit and current commit
          echo "Detecting changed files..."
          
          # For push events, compare with previous commit
          if [[ "${{ github.event_name }}" == "push" ]]; then
            PREVIOUS_COMMIT="${{ github.event.before }}"
            CURRENT_COMMIT="${{ github.sha }}"
          else
            # For other events (like workflow_dispatch), compare with previous commit
            PREVIOUS_COMMIT="HEAD~1"
            CURRENT_COMMIT="HEAD"
          fi
          
          # Get list of changed files
          git diff --name-only "$PREVIOUS_COMMIT" "$CURRENT_COMMIT" > changed_files.txt || {
            echo "Failed to detect changes, falling back to full deployment"
            full_deploy="true"
          }
          
          if [[ "$full_deploy" != "true" ]]; then
            echo "Changed files:"
            cat changed_files.txt
            echo ""
            
            # Check for global changes that require full deployment
            if grep -qE '^(docker-compose\.yml|scripts/|\.github/workflows/)' changed_files.txt; then
              echo "Global files changed, triggering full deployment"
              full_deploy="true"
            else
              # Map file changes to service groups
              if grep -qE '^compose/core/' changed_files.txt; then
                core="true"
                echo "Core infrastructure changes detected"
              fi
              
              if grep -qE '^compose/(media|gaming)/' changed_files.txt; then
                application="true"
                echo "Application service changes detected"
              fi
              
              if grep -qE '^compose/monitoring/' changed_files.txt; then
                monitoring="true"
                echo "Monitoring service changes detected"
              fi
              
              if grep -qE '^compose/security/' changed_files.txt; then
                security="true"
                echo "Security service changes detected"
              fi
              
              # Check for config file changes that affect specific groups
              if grep -qE '^configs/(caddy|mariadb|redis)/' changed_files.txt; then
                core="true"
                echo "Core configuration changes detected"
              fi
              
              if grep -qE '^configs/(prometheus|grafana|loki|alertmanager)/' changed_files.txt; then
                monitoring="true"
                echo "Monitoring configuration changes detected"
              fi
              
              # Auto-include core when other groups change (dependency handling)
              if [[ "$application" == "true" || "$monitoring" == "true" || "$security" == "true" ]]; then
                core="true"
                echo "Auto-including core infrastructure due to service dependencies"
              fi
            fi
          fi
        fi
        
        # Set outputs
        echo "core=$core" >> $GITHUB_OUTPUT
        echo "application=$application" >> $GITHUB_OUTPUT
        echo "monitoring=$monitoring" >> $GITHUB_OUTPUT
        echo "security=$security" >> $GITHUB_OUTPUT
        echo "full_deploy=$full_deploy" >> $GITHUB_OUTPUT
        
        # Upload changed files as artifact for debugging
        if [[ -f changed_files.txt ]]; then
          echo "Uploading changed files list as artifact"
        fi
        
        # Log deployment decision summary
        echo ""
        echo "=== DEPLOYMENT DECISION SUMMARY ==="
        echo "Service group deployment decisions:"
        echo "  • Core ............. $core"
        echo "  • Application ...... $application"
        echo "  • Monitoring ....... $monitoring"
        echo "  • Security ......... $security"
        echo "  • Full deploy ...... $full_deploy"
        echo "==================================="
    
    - name: Upload Changed Files List
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: changed-files
        path: changed_files.txt
        if-no-files-found: ignore
        retention-days: 7

  deploy:
    name: Deploy Infrastructure
    needs: detect-changes
    runs-on: self-hosted
    timeout-minutes: 29
    # Only run this job if changes are detected for this specific group or full deployment is required
    if: ${{ needs.detect-changes.outputs.full_deploy == 'true' ||
            needs.detect-changes.outputs.core == 'true' ||
            needs.detect-changes.outputs.application == 'true' ||
            needs.detect-changes.outputs.monitoring == 'true' ||
            needs.detect-changes.outputs.security == 'true' }}
    strategy:
      matrix:
        group: [core, application, monitoring, security]
      fail-fast: false
    env:
      GROUP: ${{ matrix.group }}
    
    steps:
    # Announce which service group this matrix job will deploy
    - name: Announce Deployment Scope
      run: |
        echo "🚀 Deploying service group: ${{ matrix.group }}"
        echo "Full deployment mode: ${{ needs.detect-changes.outputs.full_deploy }}"
        echo "Group-specific deployment: ${{ needs.detect-changes.outputs[matrix.group] }}"
    
    # Skip this matrix job if this specific group doesn't need deployment
    - name: Check Deployment Requirement
      run: |
        if [[ "${{ needs.detect-changes.outputs.full_deploy }}" == "true" ]]; then
          echo "Full deployment requested - proceeding with ${{ matrix.group }}"
        elif [[ "${{ needs.detect-changes.outputs[matrix.group] }}" == "true" ]]; then
          echo "Changes detected for ${{ matrix.group }} - proceeding"
        else
          echo "⏭No changes detected for ${{ matrix.group }} - skipping"
          exit 0
        fi
    
    - name: Clean Previous Run Files
      run: |
        # Fix permissions on any files from previous runs that might block checkout
        if [ "$(id -u)" = "0" ]; then
          # Running as root, no sudo needed
          chown -R $USER:$USER . || true
          chmod -R u+w . || true
          rm -rf compose/core/configs/ || true
        else
          # Not running as root, use sudo
          sudo chown -R $USER:$USER . || true
          sudo chmod -R u+w . || true
          sudo rm -rf compose/core/configs/ || true
        fi

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    # Decrypt environment secrets from encrypted JSON file
    - name: Decrypt Environment Secrets
      run: ./scripts/decrypt-large-secrets.sh homeserver-env-secrets.json
      env:
        LARGE_SECRET_PASSPHRASE_HOMESERVER_ENV_SECRETS_JSON: ${{ secrets.ENV_SECRETS_PASSPHRASE }}

    # Verify and prepare environment variables from the decrypted JSON file
    - name: Prepare Environment Variables
      run: |
        # Verify the JSON file exists and is valid
        if [ ! -f "$HOME/secrets/homeserver-env-secrets.json" ]; then
          echo "::error::Environment secrets file not found"
          exit 1
        fi
        
        # Validate JSON format
        if ! jq empty "$HOME/secrets/homeserver-env-secrets.json" 2>/dev/null; then
          echo "::error::Invalid JSON format in environment secrets"
          exit 1
        fi
        
        # Count loaded variables (for verification)
        VARIABLE_COUNT=$(jq 'keys | length' "$HOME/secrets/homeserver-env-secrets.json")
        echo "::notice::Environment file contains $VARIABLE_COUNT variables"
        
        # Verify critical variables are present (without exposing values)
        CRITICAL_VARS=("DOMAIN" "CLOUDFLARE_API_TOKEN" "MYSQL_ROOT_PASSWORD" "REDIS_PASSWORD")
        for var in "${CRITICAL_VARS[@]}"; do
          if jq -e "has(\"$var\")" "$HOME/secrets/homeserver-env-secrets.json" >/dev/null; then
            echo "::notice::Critical variable $var verified"
          else
            echo "::error::Critical variable $var is missing"
            exit 1
          fi
        done

    - name: Validate Configuration
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        # Ensure we're in the project directory
        cd ${{ github.workspace }}
        docker-compose config --quiet

    - name: Create Required Directories
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        
        if [ "$(id -u)" = "0" ]; then
          # Running as root, no sudo needed
          rm -rf "${SSD_PATH}/config" || true
          mkdir -p "${SSD_PATH}"/{caddy/{data,config},databases/{mariadb,redis},monitoring/{prometheus,grafana,loki,alertmanager,uptime-kuma}}
          mkdir -p "${NVME_PATH}/games/cs2"
          mkdir -p "${HDD_PATH}"/{media,downloads/complete}
          mkdir -p "${SSD_PATH}/actions-runner/_work" || true
          chown -R "${PUID}:${PGID}" "${SSD_PATH}" "${NVME_PATH}" "${HDD_PATH}" || true
          chmod -R u+rwx,g+rwx "${SSD_PATH}" "${NVME_PATH}" "${HDD_PATH}" || true
        else
          # Not running as root, use sudo
          sudo rm -rf "${SSD_PATH}/config" || true
          sudo mkdir -p "${SSD_PATH}"/{caddy/{data,config},databases/{mariadb,redis},monitoring/{prometheus,grafana,loki,alertmanager,uptime-kuma}}
          sudo mkdir -p "${NVME_PATH}/games/cs2"
          sudo mkdir -p "${HDD_PATH}"/{media,downloads/complete}
          sudo mkdir -p "${SSD_PATH}/actions-runner/_work" || true
          sudo chown -R "${PUID}:${PGID}" "${SSD_PATH}" "${NVME_PATH}" "${HDD_PATH}" || true
          sudo chmod -R u+rwx,g+rwx "${SSD_PATH}" "${NVME_PATH}" "${HDD_PATH}" || true
        fi

    - name: Set Container-Specific Permissions
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        echo "Setting container-specific directory permissions..."
        # Set permissions for monitoring services with their specific user IDs
        if [ "$(id -u)" = "0" ]; then
          # Running as root, no sudo needed
          chown -R 472:472 "${SSD_PATH}/monitoring/grafana" || true
          chown -R 65534:65534 "${SSD_PATH}/monitoring/prometheus" || true
          chown -R 10001:10001 "${SSD_PATH}/monitoring/loki" || true
          chown -R 65534:65534 "${SSD_PATH}/monitoring/alertmanager" || true
          chown -R root:root "${SSD_PATH}/monitoring/uptime-kuma" || true
          chown -R root:root "${SSD_PATH}/monitoring/fail2ban" || true
        else
          # Not running as root, use sudo
          sudo chown -R 472:472 "${SSD_PATH}/monitoring/grafana" || true
          sudo chown -R 65534:65534 "${SSD_PATH}/monitoring/prometheus" || true
          sudo chown -R 10001:10001 "${SSD_PATH}/monitoring/loki" || true
          sudo chown -R 65534:65534 "${SSD_PATH}/monitoring/alertmanager" || true
          sudo chown -R root:root "${SSD_PATH}/monitoring/uptime-kuma" || true
          sudo chown -R root:root "${SSD_PATH}/monitoring/fail2ban" || true
        fi
        echo "Container permissions set successfully"

    - name: Fix GitHub Runner Permissions
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        echo "Fixing GitHub runner directory permissions..."
        
        if [ "$(id -u)" = "0" ]; then
          # Running as root, no sudo needed
          mkdir -p "${SSD_PATH}/actions-runner/_work" || true
          chown -R "${PUID}:${PGID}" "${SSD_PATH}/actions-runner" || true
          chmod -R 755 "${SSD_PATH}/actions-runner" || true
          if [ -d "${SSD_PATH}/runner" ]; then
            echo "Cleaning up old runner directory..."
            rm -rf "${SSD_PATH}/runner" || true
          fi
        else
          # Not running as root, use sudo
          sudo mkdir -p "${SSD_PATH}/actions-runner/_work" || true
          sudo chown -R "${PUID}:${PGID}" "${SSD_PATH}/actions-runner" || true
          sudo chmod -R 755 "${SSD_PATH}/actions-runner" || true
          if [ -d "${SSD_PATH}/runner" ]; then
            echo "Cleaning up old runner directory..."
            sudo rm -rf "${SSD_PATH}/runner" || true
          fi
        fi
        
        echo "GitHub runner permissions fixed successfully"


    - name: Deploy Core Infrastructure
      if: env.GROUP == 'core' || needs.detect-changes.outputs.full_deploy == 'true'
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        # Ensure we're in the project directory
        cd ${{ github.workspace }}
        echo "Stopping existing core infrastructure containers..."
        docker-compose stop caddy cloudflare-ddns mariadb redis runner-webhook || true
        docker-compose rm -f caddy cloudflare-ddns mariadb redis runner-webhook || true

        echo "Deploying core infrastructure services..."
        docker-compose up -d caddy cloudflare-ddns mariadb redis
        
        echo "Deploying webhook scaler..."
        docker-compose up -d --build runner-webhook
        
        echo "Waiting for core services and webhook scaler..."
        sleep 30
        
        docker-compose ps mariadb | grep -q "Up" || exit 1
        docker-compose ps redis | grep -q "Up" || exit 1
        docker-compose ps runner-webhook | grep -q "Up" || exit 1
        
        echo "Webhook scaler is running and will manage GitHub runners automatically"

    - name: Deploy Application Services  
      if: env.GROUP == 'application' || needs.detect-changes.outputs.full_deploy == 'true'
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        # Ensure we're in the project directory
        cd ${{ github.workspace }}
        echo "Stopping existing application services..."
        docker-compose stop plex qbittorrent teamspeak cs2-server || true
        docker-compose rm -f plex qbittorrent teamspeak cs2-server || true
        
        echo "Deploying application services..."
        docker-compose up -d plex qbittorrent teamspeak cs2-server
        sleep 30

    - name: Create MySQL Exporter Configuration
      if: env.GROUP == 'monitoring' || needs.detect-changes.outputs.full_deploy == 'true'
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        echo "Creating MySQL exporter .my.cnf configuration..."
        
        # Create the config directory if it doesn't exist
        mkdir -p configs/mariadb/
        
        # Remove any existing file/directory with the same name to prevent conflicts
        rm -rf configs/mariadb/exporter.my.cnf
        
        # Create .my.cnf file with current environment variables
        echo "[client]" > configs/mariadb/exporter.my.cnf
        echo "user = monitoring" >> configs/mariadb/exporter.my.cnf
        echo "password = ${MONITORING_DB_PASSWORD}" >> configs/mariadb/exporter.my.cnf
        echo "host = mariadb" >> configs/mariadb/exporter.my.cnf
        echo "port = 3306" >> configs/mariadb/exporter.my.cnf
        
        # Set appropriate permissions (readable by container user)
        chmod 644 configs/mariadb/exporter.my.cnf
        echo "MySQL exporter configuration created successfully"

    - name: Deploy Monitoring Stack
      if: env.GROUP == 'monitoring' || needs.detect-changes.outputs.full_deploy == 'true'
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        # Ensure we're in the project directory
        cd ${{ github.workspace }}
        echo "Stopping existing monitoring services..."
        docker-compose stop prometheus grafana loki promtail alertmanager uptime-kuma node-exporter cadvisor redis-exporter mariadb-exporter blackbox-exporter || true
        docker-compose rm -f prometheus grafana loki promtail alertmanager uptime-kuma node-exporter cadvisor redis-exporter mariadb-exporter blackbox-exporter || true
        
        echo "Deploying monitoring services..."
        docker-compose up -d prometheus grafana loki promtail alertmanager uptime-kuma node-exporter cadvisor redis-exporter mariadb-exporter blackbox-exporter
        sleep 20

    - name: Deploy Security Services
      if: env.GROUP == 'security' || needs.detect-changes.outputs.full_deploy == 'true'
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        # Ensure we're in the project directory
        cd ${{ github.workspace }}
        echo "Stopping existing security services..."
        docker-compose stop fail2ban || true
        docker-compose rm -f fail2ban || true
        
        echo "Deploying security services..."
        docker-compose up -d fail2ban
        sleep 10

    - name: Health Check
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        # Ensure we're in the project directory
        cd ${{ github.workspace }}
        echo "Performing health checks..."
        
        # Check core services
        for service in caddy mariadb redis runner-webhook; do
          echo "Checking $service..."
          timeout=60
          elapsed=0
          
          while [[ $elapsed -lt $timeout ]]; do
            case $service in
              caddy)
                if docker-compose ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
              mariadb)
                if docker-compose ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
              redis)
                if docker-compose ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
              runner-webhook)
                if docker-compose ps "$service" | grep -q "Up"; then
                  echo "$service is running"
                  break
                fi
                ;;
            esac
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          if [[ $elapsed -ge $timeout ]]; then
            echo "$service failed to start"
            exit 1
          fi
        done
        
        # Check monitoring services
        for service in prometheus grafana; do
          echo "Checking $service..."
          if docker-compose ps "$service" | grep -q "Up"; then
            echo "$service is running"
          else
            echo "$service not running (non-critical)"
          fi
        done
        
        echo "All critical services are running"

    - name: Test External Access
      run: |
        # Load environment variables for this step only
        export $(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$HOME/secrets/homeserver-env-secrets.json" | xargs)
        echo "Testing external access..."
        sleep 30
        
        endpoints=(
          "https://monitoring.${DOMAIN}/api/health"
          "https://status.${DOMAIN}"
          "https://runners.${DOMAIN}/health"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing $endpoint..."
          if curl -f -s --max-time 30 --insecure "$endpoint" >/dev/null 2>&1; then
            echo "External endpoint accessible"
          else
            echo "External endpoint not accessible (may need more time)"
          fi
        done


    # Fix permissions for next run
    - name: Fix Permissions for Next Run
      if: always()
      run: |
        echo "Fixing permissions for next run..."
        # Fix ownership of any created files/directories
        if [ "$(id -u)" = "0" ]; then
          # Running as root, no sudo needed
          chown -R $USER:$USER . || true
          chmod -R u+w . || true
        else
          # Not running as root, use sudo
          sudo chown -R $USER:$USER . || true
          sudo chmod -R u+w . || true
        fi
        echo "Permissions fixed"

    - name: Deployment Summary
      run: |
        echo "Deployment completed successfully!"
        echo ""
        echo "Service Categories Deployed:"
        echo "  • Core Infrastructure (Proxy, Database, Cache, GitHub Runners)"
        echo "  • Media Services (Plex, qBittorrent)"
        echo "  • Gaming Services (TeamSpeak, CS2)"
        echo "  • Monitoring Stack (Prometheus, Grafana, Loki, Alerting, Uptime)"
        echo "  • Security Services (Fail2Ban)"
        echo ""
        echo "Configuration:"
        echo "  • All environment variables loaded from encrypted secrets"
        echo "  • Single passphrase authentication used"
        echo "  • Secure cleanup completed"